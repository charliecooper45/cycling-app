extends layout

block content
	.ui.two.column.centered.grid
		.ui.statistics.center.aligned
			.statistic
				.value= stats.ftp
				.label
					| FTP
			.statistic
				.value= stats.weight
				.label
					| Weight (KG)
			.statistic
				.value= stats.wattsPerKilo
				.label
					| Watts per kilo
		.one.column.centered.row
			.ui.horizontal.segments
				.fitness-graph.ui.segment
					canvas#ftp
				.fitness-table.ui.segment
					table.ui.table.inverted
						thead
							th Date
							th FTP
							th Test
						tbody
							- const ftpLength = ftps.length <= 8 ? ftps.length : 8;
							- for (let i = 0; i < ftpLength; i++)
								- const ftp = ftps[i]
								tr
									td= ftp.date
									td= ftp.value
									td= ftp.test
		.one.column.centered.row
			.ui.horizontal.segments
				.fitness-graph.ui.segment
					canvas#weight
				.fitness-table.ui.segment
					table.ui.table.inverted
						thead
							th Date
							th Weight (KG)
						tbody
							- const weightLength = weights.length <= 8 ? weights.length : 8;
							- for (let i = 0; i < weightLength; i++)
								- const weight = weights[i]
								tr
									td= weight.date
									td= weight.value

block script
	script.
		const ftps = !{JSON.stringify(ftps).replace(/<\//g, "<\\/")}.slice(0).reverse()
		var ftp = document.getElementById("ftp").getContext('2d');
		new Chart(ftp, {
			"type": "line",
			"data": {
				"labels": ftps.map(function(ftp) { return ftp.shortDate }),
				"datasets": [{
					"label": "FTP",
					"data": ftps.map(function(ftp) { return ftp.value }),
					"fill": false,
					"borderColor": "rgb(75, 192, 192)",
					"lineTension": 0
				}]
			},
			"options": {
				"legend": {
					"display": false
				},
				"title": {
					"display": true,
					"text": 'Functional Threshold Power (FTP)'
				}
			}
		});
		const weights = !{JSON.stringify(weights).replace(/<\//g, "<\\/")}.slice(0).reverse()
		var weight = document.getElementById("weight").getContext('2d');
		new Chart(weight, {
			"type": "line",
			"data": {
				"labels": weights.map(function (weight) {
					return weight.shortDate
				}),
				"datasets": [{
					"label": "Weight (KG)",
					"data": weights.map(function (weight) {
						return weight.value
					}),
					"fill": false,
					"borderColor": "rgb(75, 192, 192)",
					"lineTension": 0
				}]
			},
			"options": {
				"legend": {
					"display": false
				},
				"title": {
					"display": true,
					"text": 'Weight (KG)'
				}
			}
		});


								
